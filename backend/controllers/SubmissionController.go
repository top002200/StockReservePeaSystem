package controllers

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/top002200/stockreversepea/config"
	"github.com/top002200/stockreversepea/models"
	"gorm.io/gorm"
)

// CreateSubmission - Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
func CreateSubmission(c *gin.Context) {
	var submission models.Submission

	// ‡∏ú‡∏π‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏Å‡∏±‡∏ö struct
	if err := c.ShouldBindJSON(&submission); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"status": "error", "message": "Invalid input"})
		return
	}

	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ `submitted_at` ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
	if submission.SubmittedAt.IsZero() {
		submission.SubmittedAt = time.Now()
	}

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if err := config.DB.Create(&submission).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "Failed to create submission"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"status": "success", "data": submission})
}

// GetSubmissionByID - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• submission ‡∏ï‡∏≤‡∏° ID
func GetSubmissionByID(c *gin.Context) {
	submissionID := c.Param("id")

	var submission models.Submission
	if err := config.DB.First(&submission, "submission_id = ?", submissionID).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			c.JSON(http.StatusNotFound, gin.H{"status": "error", "message": "Submission not found"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "Error retrieving submission details"})
		}
		return
	}

	c.JSON(http.StatusOK, gin.H{"status": "success", "data": submission})
}

// GetAllSubmissions - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• submission ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func GetAllSubmissions(c *gin.Context) {
	var submissions []models.Submission
	if err := config.DB.Find(&submissions).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "Error retrieving submissions", "error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"status": "success", "data": submissions})
}



func UpdateSubmission(c *gin.Context) {
	submissionID := c.Param("id")

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• submission ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	var submission models.Submission
	if err := config.DB.First(&submission, "submission_id = ?", submissionID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"status": "error", "message": "Submission not found"})
		return
	}

	// ‚úÖ Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
	fmt.Println("üîπ Existing submission:", submission)

	// ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å JSON
	var updatedData models.Submission
	if err := c.ShouldBindJSON(&updatedData); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"status": "error", "message": err.Error()})
		return
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
	if updatedData.IsUrgent != 0 { // üîπ ‡πÉ‡∏ä‡πâ `is_urgent` ‡πÅ‡∏ó‡∏ô `approval_status`
		submission.IsUrgent = updatedData.IsUrgent
	}
	if updatedData.Type != nil {
		submission.Type = updatedData.Type
	}
	if updatedData.Brand != nil {
		submission.Brand = updatedData.Brand
	}
	if updatedData.Model != nil {
		submission.Model = updatedData.Model
	}
	if updatedData.AssetCode != nil {
		submission.AssetCode = updatedData.AssetCode
	}
	if updatedData.ContractNumber != nil {
		submission.ContractNumber = updatedData.ContractNumber
	}
	if updatedData.TimeStart != nil {
		submission.TimeStart = updatedData.TimeStart
	}
	if updatedData.TimeEnd != nil {
		submission.TimeEnd = updatedData.TimeEnd
	}

	// ‚úÖ Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	fmt.Println("üîπ Updated submission before saving:", submission)

	// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	result := config.DB.Save(&submission)
	if result.Error != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "Failed to update submission details"})
		return
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if result.RowsAffected == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"status": "error", "message": "No records updated"})
		return
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
	c.JSON(http.StatusOK, gin.H{"status": "success", "message": "Submission updated successfully", "data": submission})
}

// DeleteSubmission - ‡∏•‡∏ö submission ‡∏ï‡∏≤‡∏° ID
func DeleteSubmission(c *gin.Context) {
	submissionID := c.Param("id")

	var submission models.Submission
	if err := config.DB.First(&submission, "submission_id = ?", submissionID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"status": "error", "message": "Submission not found"})
		return
	}

	if err := config.DB.Delete(&submission).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "Failed to delete submission"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"status": "success", "message": "Submission deleted successfully"})
}
