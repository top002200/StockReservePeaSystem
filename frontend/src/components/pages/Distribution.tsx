import React, { useEffect, useState } from "react";
import Info_Layout from "../Layout/info_Layout";
import { Button, Modal, Table, Form, Pagination } from "react-bootstrap";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faEdit, faFileExcel, faFilePdf, faTrashCan } from "@fortawesome/free-solid-svg-icons";
import {
  getAllDistributions,
  deleteDistribution,
  updateDistribution,
} from "../../services/api";
import Swal from "sweetalert2";
import { DistributionData } from "../../interface/IDistribution";
import jsPDF from "jspdf";
import "jspdf-autotable";
import { THSarabunFont } from "../../fonts/THSarabun";
import * as XLSX from "xlsx";

const Distribution: React.FC = () => {
  const [isEdit, setIsEdit] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [formData, setFormData] = useState({
    equipment_type: "",
    g_name: "",
    equipment_brand: "",
    equipment_model: "",
    equip_contract: "",
    equip_assetcode: "",
    r_name: "",
    date: "",
  });
  const [data, setData] = useState<any[]>([]); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å API

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  const fetchDistributions = async () => {
    try {
      const response = await getAllDistributions();
      if (response.status === true) {
        // ‡∏ñ‡πâ‡∏≤ response.status ‡πÄ‡∏õ‡πá‡∏ô boolean
        setData(response.data);
      } else {
        console.error("Failed to fetch distributions:", response.message);
      }
    } catch (error) {
      console.error("Error fetching distributions:", error);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      const response = await getAllDistributions();
      console.log("API Response:", response);

      if (response.status) {
        setData(response.data);
      }
    };
    fetchData();
  }, []);
  useEffect(() => {
    console.log("Data changed:", data);
  }, [data]);

  const handleDelete = async (index: number) => {
    const idForFix = data[index]?.id_for_fix;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ idForFix ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    if (!idForFix || idForFix === "") {
      console.error("IDForFix is empty or invalid:", idForFix); // ‡πÄ‡∏û‡∏¥‡πà‡∏° Debug
      Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "IDForFix ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "error");
      return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
    }

    console.log("üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö ID:", idForFix); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ Debug ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö

    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢ SweetAlert2
    const confirmResult = await Swal.fire({
      title: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÑ‡∏´‡∏°?",
      text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢!",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (!confirmResult.isConfirmed) {
      return; // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    }

    // ‡∏™‡πà‡∏á idForFix ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
    const response = await deleteDistribution(Number(idForFix));
    console.log("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏ö:", response);

    if (response.status) {
      const newData = data.filter((item) => item.id_for_fix !== idForFix);
      setData([...newData]);
      console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:", newData);
      Swal.fire("‡∏•‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß", "success");
    } else {
      console.error("‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.message);
      Swal.fire(
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        response.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ",
        "error"
      );
    }
  };

  interface Equipment {
    equipment_type: string;
    equipment_name: string;
    equipment_brand: string;
    equipment_model: string;
  }

  interface DistributionItem {
    equipment: Equipment;
    equip_contract: string;
    r_name: string;
    date: string;
    distribution_id: string;
    distribution_amount: number;
    g_name: string;
    equip_assetcode: string;
  }

  const handleOpenModal = (
    edit = false,
    item: DistributionItem | null = null
  ) => {
    setIsEdit(edit);
    setShowModal(true);

    if (edit && item) {
      setFormData({
        equipment_type: item.equipment?.equipment_type || "",
        g_name: item.g_name || "",
        equipment_brand: item.equipment?.equipment_brand || "",
        equipment_model: item.equipment?.equipment_model || "",
        equip_contract: item.equip_contract || "",
        equip_assetcode: item.equip_assetcode || "",
        r_name: item.r_name || "",
        date: item.date || "",
      });
    } else {
      setFormData({
        equipment_type: "",
        g_name: "",
        equipment_brand: "",
        equipment_model: "",
        equip_contract: "",
        equip_assetcode: "",
        r_name: "",
        date: "",
      });
    }
  };



  const handleEdit = async (index: number) => {
    const idForFix = data[index]?.id_for_fix;

    if (!idForFix || idForFix === "") {
      console.error("IDForFix is empty or invalid:", idForFix);
      Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "IDForFix ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "error");
      return;
    }

    console.log("üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ID:", idForFix);

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SweetAlert2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const confirmResult = await Swal.fire({
      title: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÑ‡∏´‡∏°?",
      text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡πÉ‡∏ä‡πà, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡∏¢!",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (!confirmResult.isConfirmed) {
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const updateData: DistributionData = {
      g_name: data[index]?.g_name || "",
      r_name: data[index]?.r_name || "",
      distribution_amount: data[index]?.distribution_amount || 0,
      equipment_id: data[index]?.equipment_id || 0,
      date: data[index]?.date || "",
      equip_contract: data[index]?.equip_contract || "",
      equip_assetcode: data[index]?.equip_assetcode || "",
    };

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const response = await updateDistribution(updateData);

    if (response.status) {
      Swal.fire("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success");
      // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤ UI ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
    } else {
      Swal.fire(
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        response.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
        "error"
      );
    }
  };

  const handleCloseModal = () => {
    setShowModal(false);
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const [selectedMonth, setSelectedMonth] = useState(""); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [selectedYear, setSelectedYear] = useState("");

  const handleMonthChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedMonth(e.target.value); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  };

  const handleYearChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedYear(e.target.value);
  };


  /// ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  const filteredData = data
    .filter((item) => {
      if (!item.date || typeof item.date !== "string") return false; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ undefined ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const date = new Date(item.date);
      const itemMonth = date.getMonth() + 1;
      const itemYear = date.getFullYear();
      const isMonthMatched =
        selectedMonth === "" || itemMonth === parseInt(selectedMonth);
      const isYearMatched =
        selectedYear === "" || itemYear === parseInt(selectedYear);
      return isMonthMatched && isYearMatched;
    });

  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 10;

  // ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const totalPages = Math.ceil(filteredData.length / rowsPerPage);
  const paginatedData = filteredData.slice(
    (currentPage - 1) * rowsPerPage,
    currentPage * rowsPerPage
  );

  const base64Data = THSarabunFont.normal.split(",")[1];
  console.log("Base64 Data Only:", base64Data);

  // Helper function to validate Base64
  function isValidBase64(str: string): boolean {
    try {
      const decoded = atob(str.split(",")[1]); // ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Base64 ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å "data:font/ttf;base64,"
      return !!decoded;
    } catch (e) {
      console.error("Base64 validation error:", e);
      return false;
    }
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
  const exportToPDF = () => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (Landscape)
    const doc = new jsPDF({
      orientation: "landscape", // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î orientation ‡πÄ‡∏õ‡πá‡∏ô "landscape"
    });

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå
      const base64Data = THSarabunFont.normal.split(",")[1];
      if (!base64Data || !isValidBase64(THSarabunFont.normal)) {
        throw new Error("Font data is not valid Base64.");
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå
      doc.addFileToVFS("THSarabunNew.ttf", base64Data);
      doc.addFont("THSarabunNew.ttf", "THSarabun", "normal");
      doc.setFont("THSarabun");
      doc.setFontSize(16); // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const monthNames = [
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
        "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
        "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
        "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
        "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
        "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
        "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
        "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
        "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
        "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
        "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
      ];

      const selectedMonthName =
        selectedMonth !== "" ? monthNames[parseInt(selectedMonth) - 1] : "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î";
      const selectedYearText = selectedYear !== "" ? selectedYear : "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î";

      // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      const documentTitle = `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${selectedMonthName} ‡∏õ‡∏µ ${selectedYearText}`;
      doc.text(documentTitle, 14, 10); // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á

      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const filteredDataByMonthYear = filteredData.filter((item) => {
        if (!item.date) return false;
        const date = new Date(item.date);
        const itemMonth = date.getMonth() + 1;
        const itemYear = date.getFullYear();
        const isMonthMatched =
          selectedMonth === "" || itemMonth === parseInt(selectedMonth);
        const isYearMatched =
          selectedYear === "" || itemYear === parseInt(selectedYear);
        return isMonthMatched && isYearMatched;
      });

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      const tableColumn = [
        "‡∏•‡∏≥‡∏î‡∏±‡∏ö",
        "‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£",
        "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£",
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
        "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠",
        "‡∏£‡∏∏‡πà‡∏ô",
        "‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô",
        "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤",
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£",

      ];
      const tableRows: any[] = [];

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `filteredDataByMonthYear`
      filteredDataByMonthYear.forEach((item, index) => {
        const rowData = [
          index + 1, // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà
          item.g_name, // ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£
          item.r_name, // ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£
          item.equipment?.equipment_type,
          item.equipment?.equipment_brand,
          item.equipment?.equipment_model,
          item.equip_assetcode,
          item.equip_contract,
          item.distribution_amount,
          item.date ? new Date(item.date).toLocaleDateString() : "-", // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£
        ];
        tableRows.push(rowData);
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (tableRows.length === 0) {
        Swal.fire("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "info");
        return;
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏á‡πÉ‡∏ô PDF
      (doc as any).autoTable({
        head: [tableColumn],
        body: tableRows,
        startY: 15,
        styles: {
          font: "THSarabun", // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå
          fontSize: 12, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå
          lineColor: [200, 200, 200], // ‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
          lineWidth: 0.3, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
          overflow: "linebreak",
          minCellHeight: 10,
        },
        headStyles: {
          fillColor: [0, 102, 204], // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
          textColor: [255, 255, 255], // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
          fontStyle: "bold", // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
          valign: "middle",
          halign: "center",
        },
        bodyStyles: {
          font: "THSarabun", // ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
          textColor: [0, 0, 0], // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          overflow: "linebreak",
        },
        columnStyles: {
          0: { halign: "center", cellWidth: 10 }, // ‡∏•‡∏≥‡∏î‡∏±‡∏ö
          1: { halign: "center" }, //g_name
          2: { halign: "center" }, //r_name
          3: { halign: "center" }, //type
          4: { halign: "center" }, //brand
          5: { halign: "center" }, //model
          6: { halign: "center", cellWidth: 25 }, //assetcode
          7: { halign: "center", cellWidth: 25 }, //contract
          8: { halign: "center", cellWidth: 10 }, //amount
          9: { halign: "center", cellWidth: 20 }, //date
        },
      });

      // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå PDF
      const fileName = `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå_${selectedMonthName}_${selectedYearText}.pdf`;

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF
      doc.save(fileName);
    } catch (error) {
      console.error("Failed to export PDF:", error);
    }
  };

  const exportToExcel = () => {
    try {
      const monthNames = [
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
        "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
        "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
        "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
        "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
        "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
        "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
        "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
        "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
        "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
        "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
      ];

      const selectedMonthName =
        selectedMonth !== "" ? monthNames[parseInt(selectedMonth) - 1] : "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î";
      const selectedYearText = selectedYear !== "" ? selectedYear : "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î";
      const fileName = `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå_${selectedMonthName}_${selectedYearText}.xlsx`;

      const filteredDataByMonthYear = filteredData.filter((item) => {
        if (!item.date) return false;
        const date = new Date(item.date);
        const itemMonth = date.getMonth() + 1;
        const itemYear = date.getFullYear();
        const isMonthMatched =
          selectedMonth === "" || itemMonth === parseInt(selectedMonth);
        const isYearMatched =
          selectedYear === "" || itemYear === parseInt(selectedYear);
        return isMonthMatched && isYearMatched;
      });

      if (filteredDataByMonthYear.length === 0) {
        Swal.fire("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "info");
        return;
      }

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel
      const excelData = filteredDataByMonthYear.map((item, index) => ({
        "‡∏•‡∏≥‡∏î‡∏±‡∏ö": index + 1,
        "‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£": item.g_name,
        "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£": item.r_name,
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": item.equipment?.equipment_type,
        "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠": item.equipment?.equipment_brand,
        "‡∏£‡∏∏‡πà‡∏ô": item.equipment?.equipment_model,
        "‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô": item.equip_assetcode,
        "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤": item.equip_contract,
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": item.distribution_amount,
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£": item.date
          ? new Date(item.date).toLocaleDateString()
          : "-",
      }));

      const worksheet = XLSX.utils.json_to_sheet(excelData);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πÑ‡∏ï‡∏•‡πå
      const range = XLSX.utils.decode_range(worksheet["!ref"] || "A1");
      for (let R = range.s.r; R <= range.e.r; ++R) {
        for (let C = range.s.c; C <= range.e.c; ++C) {
          const cellAddress = XLSX.utils.encode_cell({ r: R, c: C });
          if (!worksheet[cellAddress]) continue;
          worksheet[cellAddress].s = {
            font: { name: "Arial", sz: 12, bold: R === 0 }, // ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î, ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏ô‡∏≤
            alignment: {
              horizontal: "center", // ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
              vertical: "center", // ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
              wrapText: true, // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (break word)
            },
            border: {
              top: { style: "thin", color: { rgb: "000000" } },
              bottom: { style: "thin", color: { rgb: "000000" } },
              left: { style: "thin", color: { rgb: "000000" } },
              right: { style: "thin", color: { rgb: "000000" } },
            },
          };
        }
      }

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
      const columnWidths = [
        { wch: 5 }, //‡∏•‡∏≥‡∏î‡∏±‡∏ö
        { wch: 30 }, //g_name
        { wch: 30 }, //r_name
        { wch: 20 }, // type
        { wch: 20 }, //brand
        { wch: 20 }, //model
        { wch: 20 }, //assetcode
        { wch: 20 }, //contract
        { wch: 10 }, //amount
        { wch: 20 }, //date
      ];
      worksheet["!cols"] = columnWidths;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á workbook ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° worksheet
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
      XLSX.writeFile(workbook, fileName);
    } catch (error) {
      console.error("Failed to export Excel:", error);
    }
  };

  return (
    <Info_Layout>
      <div className="distribute-content">
        <h4
          className="text-center mb-4"
          style={{ color: "#74045f", textDecoration: "underline" }}
        >
          <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</b>
        </h4>

        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            marginBottom: 15,
            padding: "0 20px", // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•
          }}
        >
          {/* Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏õ‡∏µ */}
          <div style={{ display: "flex", gap: "10px" }}>
            {/* Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
            <Form.Select
              aria-label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
              onChange={handleMonthChange}
              value={selectedMonth}
              style={{ width: "200px" }}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
              <option value="1">‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°</option>
              <option value="2">‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå</option>
              <option value="3">‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°</option>
              <option value="4">‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô</option>
              <option value="5">‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°</option>
              <option value="6">‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô</option>
              <option value="7">‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°</option>
              <option value="8">‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°</option>
              <option value="9">‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô</option>
              <option value="10">‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°</option>
              <option value="11">‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô</option>
              <option value="12">‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°</option>
            </Form.Select>

            {/* Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ */}
            <Form.Select
              aria-label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ"
              onChange={handleYearChange}
              value={selectedYear}
              style={{ width: "200px" }}
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ</option>
              {Array.from(
                new Set(
                  data
                    .filter((item) => {
                      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô
                      if (selectedMonth) {
                        const itemMonth = new Date(item.date as string).getMonth() + 1;
                        return itemMonth === parseInt(selectedMonth);
                      }
                      return true;
                    })
                    .filter((item) => item.date) // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                    .map((item) => {
                      const date = new Date(item.date as string); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î item.date ‡πÄ‡∏õ‡πá‡∏ô string
                      return date.getFullYear();
                    })
                )
              )
                .sort()
                .map((year) => (
                  <option key={year} value={year}>
                    {year}
                  </option>
                ))}
            </Form.Select>
          </div>

          <div
            style={{
              display: "flex",
              alignItems: "center",
              gap: "10px",
            }}
          >
            {/* Button Group ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡πÅ‡∏•‡∏∞ Excel */}
            <div
              className="btn-group"
              role="group"
              aria-label="Export Buttons"
              style={{
                borderRadius: "8px", // ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô
                overflow: "hidden", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏ô
                boxShadow: "0px 2px 5px rgba(0, 0, 0, 0.1)", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
              }}
            >
              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF */}
              <button
                type="button"
                className="btn btn-danger"
                onClick={exportToPDF}
                title="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF"
                style={{
                  fontSize: "20px", // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                }}
              >
                <FontAwesomeIcon icon={faFilePdf} />
              </button>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô Excel */}
              <button
                type="button"
                className="btn btn-success"
                onClick={exportToExcel}
                title="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Excel"
                style={{
                  fontSize: "20px",
                }}
              >
                <FontAwesomeIcon icon={faFileExcel} />
              </button>
            </div>
          </div>
        </div>

        <Table bordered hover responsive>
          <thead>
            <tr className="align-middle text-center">
              <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà</th>
              <th>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
              <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
              <th>‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£</th>
              <th>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£</th>
              <th style={{ width: 150 }}></th>
            </tr>
          </thead>
          <tbody>
            {paginatedData.map((item, index) => (
              <tr key={item.distribution_id}>
                <td className="align-middle text-center">
                  {(currentPage - 1) * rowsPerPage + index + 1}
                </td>
                <td className="align-middle text-left">
                  <div
                    style={{ display: "flex", justifyContent: "space-between" }}
                  >
                    <div
                      style={{
                        flex: 1,
                        paddingRight: "5px",
                        borderRight: "1px solid #ccc",
                      }}
                    >
                      <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong>{" "}
                      {item.equipment?.equipment_type || "-"}
                      <br />
                      <strong>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠:</strong>{" "}
                      {item.equipment?.equipment_brand || "-"}
                      <br />
                      <strong>‡∏£‡∏∏‡πà‡∏ô:</strong>{" "}
                      {item.equipment?.equipment_model || "-"}
                      <br />
                    </div>
                    <div style={{ flex: 1, paddingLeft: "10px" }}>
                      <strong>‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô:</strong>{" "}
                      {item.equip_assetcode || "-"}
                      <br />
                      <strong>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤:</strong> {item.equip_contract || "-"}
                    </div>
                  </div>
                </td>
                <td className="align-middle text-center">
                  {item.distribution_amount}
                </td>
                <td className="align-middle text-center">{item.g_name}</td>
                <td className="align-middle text-center">{item.r_name}</td>
                <td className="align-middle text-center">{item.date}</td>
                <td className="align-middle text-center">
                  {/* <Button
                    variant="outline-primary"
                    className="me-2"
                    style={{ width: "40px" }}
                    onClick={() => handleEdit(index)} // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleEdit ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å
                  >
                    <FontAwesomeIcon icon={faEdit} />
                  </Button> */}
                  <Button
                    variant="outline-danger"
                    onClick={() => handleDelete(index)}
                  >
                    <FontAwesomeIcon icon={faTrashCan} />
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>

        <Pagination className="justify-content-center">
          <Pagination.Prev
            onClick={() => setCurrentPage(currentPage - 1)}
            disabled={currentPage === 1}
          />
          {Array.from({ length: totalPages }, (_, i) => (
            <Pagination.Item
              key={i + 1}
              active={i + 1 === currentPage}
              onClick={() => setCurrentPage(i + 1)}
            >
              {i + 1}
            </Pagination.Item>
          ))}
          <Pagination.Next
            onClick={() => setCurrentPage(currentPage + 1)}
            disabled={currentPage === totalPages}
          />
        </Pagination>

        <Modal show={showModal} onHide={handleCloseModal}>
          <Modal.Header closeButton className="modal-header-form">
            <Modal.Title>{isEdit ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form>
              {/* ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
              <Form.Group className="mb-3">
                <Form.Label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</Form.Label>
                <Form.Control
                  type="text"
                  name="equipment_type"
                  value={formData.equipment_type}
                  onChange={handleInputChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£</Form.Label>
                <Form.Control
                  type="text"
                  name="equipment_name"
                  value={formData.g_name}
                  onChange={handleInputChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</Form.Label>
                <Form.Control
                  type="text"
                  name="equipment_brand"
                  value={formData.equipment_brand}
                  onChange={handleInputChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>‡∏£‡∏∏‡πà‡∏ô</Form.Label>
                <Form.Control
                  type="text"
                  name="equipment_model"
                  value={formData.equipment_model}
                  onChange={handleInputChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô</Form.Label>
                <Form.Control
                  type="text"
                  name="equip_assetcode"
                  value={formData.equip_assetcode}
                  onChange={handleInputChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤</Form.Label>
                <Form.Control
                  type="text"
                  name="equip_contract"
                  value={formData.equip_contract}
                  onChange={handleInputChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö</Form.Label>
                <Form.Control
                  type="text"
                  name="receiver"
                  value={formData.r_name}
                  onChange={handleInputChange}
                />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢</Form.Label>
                <Form.Control
                  type="date"
                  name="date"
                  value={formData.date}
                  onChange={handleInputChange}
                />
              </Form.Group>
            </Form>
          </Modal.Body>
          <Modal.Footer>
            <Button variant="secondary" onClick={handleCloseModal}>
              ‡∏õ‡∏¥‡∏î
            </Button>
            <Button variant="success">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Button>
          </Modal.Footer>
        </Modal>
      </div>
    </Info_Layout>
  );
};

export default Distribution;
